{"status":"unsafe","types":{"51":{"30":{"ann":"x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":51,"col":30},"1":{"ann":"{v : Bool | Prop v}","ident":"one_plus_one_eq_two","row":51,"col":1},"26":{"ann":"x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}","ident":"_","row":51,"col":26},"24":{"ann":"Integer","ident":"lq_anf$","row":51,"col":24}},"73":{"12":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":73,"col":12},"1":{"ann":"{VV : Bool | VV /= GHC.Types.False\n             && VV /= GHC.Types.False\n             && Prop VV}","ident":"propOk","row":73,"col":1},"23":{"ann":"x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}","ident":"_","row":73,"col":23},"27":{"ann":"x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":73,"col":27},"21":{"ann":"Integer","ident":"lq_anf$","row":73,"col":21}},"66":{"17":{"ann":"{v : [Char] | false} -> a","ident":"die","row":66,"col":17},"21":{"ann":"[Char]","ident":"lq_anf$","row":66,"col":21}},"90":{"14":{"ann":"{v : Double | v == n}","ident":"n","row":90,"col":14},"19":{"ann":"x1:Int -> {v : Double | v == x1}","ident":"_","row":90,"col":19},"16":{"ann":"x1:Double -> x2:{v : Double | v /= 0} -> {v : Double | v == x1 / x2}","ident":"_","row":90,"col":16}},"89":{"14":{"ann":"{v : [Char] | false} -> a","ident":"die","row":89,"col":14},"1":{"ann":"Double -> {v : Int | v /= 0} -> Double","ident":"divide","row":89,"col":1},"18":{"ann":"[Char]","ident":"lq_anf$","row":89,"col":18},"8":{"ann":"Double","ident":"n","row":89,"col":8}},"58":{"28":{"ann":"x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}","ident":"_","row":58,"col":28},"1":{"ann":"{v : Bool | Prop v}","ident":"one_plus_one_eq_three","row":58,"col":1},"26":{"ann":"Integer","ident":"lq_anf$","row":58,"col":26},"32":{"ann":"x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":58,"col":32}},"33":{"7":{"ann":"{VV : [Char] | false}","ident":"str","row":33,"col":7},"13":{"ann":"[Char] -> a","ident":"error","row":33,"col":13},"1":{"ann":"{VV : [Char] | false} -> a","ident":"fixme","row":33,"col":1},"20":{"ann":"[Char]","ident":"lq_anf$","row":33,"col":20}},"65":{"1":{"ann":"{v : Bool | Prop v} -> {v : Bool | Prop v}","ident":"lAssert","row":65,"col":1}},"24":{"1":{"ann":"{VV : [Char] | false} -> a","ident":"die","row":24,"col":1},"18":{"ann":"[Char]","ident":"lq_anf$","row":24,"col":18},"5":{"ann":"{VV : [Char] | false}","ident":"str","row":24,"col":5},"11":{"ann":"[Char] -> a","ident":"error","row":24,"col":11}},"79":{"12":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":79,"col":12},"1":{"ann":"{VV : Bool | VV /= GHC.Types.False\n             && VV /= GHC.Types.False\n             && Prop VV}","ident":"propFail","row":79,"col":1},"23":{"ann":"x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}","ident":"_","row":79,"col":23},"27":{"ann":"x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":79,"col":27},"21":{"ann":"Integer","ident":"lq_anf$","row":79,"col":21}}},"errors":[{"start":{"line":79,"column":21},"stop":{"line":79,"column":31},"message":"/home/cse230/Desktop/Hw4/flycheck_Assert.lhs:79:21-30: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?e}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Integer.Type.Integer | ?c == 1}\n\n    ?e := {?e : GHC.Types.Bool | Prop ?e <=> ?a == ?b}\n\n    ?b := {?b : GHC.Integer.Type.Integer | ?b == 4}\n\n    ?d := {?d : GHC.Integer.Type.Integer | ?d == 1}\n\n    ?a := {?a : GHC.Integer.Type.Integer | ?a == ?c + ?d}"},{"start":{"line":58,"column":26},"stop":{"line":58,"column":36},"message":"/home/cse230/Desktop/Hw4/flycheck_Assert.lhs:58:26-35: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | Prop VV <=> ?a == ?b}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Integer.Type.Integer | ?c == 1}\n\n    ?b := {?b : GHC.Integer.Type.Integer | ?b == 3}\n\n    ?d := {?d : GHC.Integer.Type.Integer | ?d == 1}\n\n    ?a := {?a : GHC.Integer.Type.Integer | ?a == ?c + ?d}"}]}
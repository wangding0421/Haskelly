24:1-24:4::die :: "{VV : [Char] | false} -> a"
24:5-24:8::str :: "{VV : [Char] | false}"
24:11-24:41::error :: "[Char] -> a"
24:18-24:33::lq_anf$ :: "[Char]"
33:1-33:6::fixme :: "{VV : [Char] | false} -> a"
33:7-33:10::str :: "{VV : [Char] | false}"
33:13-33:68::error :: "[Char] -> a"
33:20-33:61::lq_anf$ :: "[Char]"
51:1-51:20::one_plus_one_eq_two :: "{v : Bool | Prop v}"
51:24-51:29::lq_anf$ :: "Integer"
51:26-51:27::_ :: "x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}"
51:30-51:32::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}"
58:1-58:22::one_plus_one_eq_three :: "{v : Bool | Prop v}"
58:26-58:31::lq_anf$ :: "Integer"
58:28-58:29::_ :: "x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}"
58:32-58:34::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}"
65:1-65:8::lAssert :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
66:17-66:36::die :: "{v : [Char] | false} -> a"
66:21-66:36::lq_anf$ :: "[Char]"
73:1-73:7::propOk :: "{VV : Bool | VV /= GHC.Types.False\n             && VV /= GHC.Types.False\n             && Prop VV}"
73:12-73:19::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
73:21-73:26::lq_anf$ :: "Integer"
73:23-73:24::_ :: "x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}"
73:27-73:29::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}"
79:1-79:9::propFail :: "{VV : Bool | VV /= GHC.Types.False\n             && VV /= GHC.Types.False\n             && Prop VV}"
79:12-79:19::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
79:21-79:26::lq_anf$ :: "Integer"
79:23-79:24::_ :: "x1:Integer -> x2:Integer -> {v : Integer | v == x1 + x2}"
79:27-79:29::_ :: "x1:Integer -> x2:Integer -> {v : Bool | Prop v <=> x1 == x2}"
89:1-89:7::divide :: "Double -> {v : Int | v /= 0} -> Double"
89:8-89:9::n :: "Double"
89:14-89:39::die :: "{v : [Char] | false} -> a"
89:18-89:39::lq_anf$ :: "[Char]"
90:14-90:34::n :: "{v : Double | v == n}"
90:16-90:17::_ :: "x1:Double -> x2:{v : Double | v /= 0} -> {v : Double | v == x1 / x2}"
90:19-90:31::_ :: "x1:Int -> {v : Double | v == x1}"